# SongSara Downloader - Cursor Configuration

## Project Overview

This is a Golang CLI tool for downloading entire albums or playlists from SongSara music platform. The project allows users to download music with concurrent downloads (max 10 at a time), bypassing the need for a VIP account or manual individual downloads.

## Project Structure

- `main.go` - CLI entry point using Cobra framework with version information
- `downloader.go` - Core downloader implementation with concurrent downloads and web scraping
- `go.mod` & `go.sum` - Go module dependencies
- `.goreleaser.yml` - GoReleaser configuration for multi-platform builds
- `.github/workflows/release.yml` - GitHub Actions workflow for automatic releases
- `Makefile` - Build and development commands
- `README.md` - Simplified documentation with download links
- `RELEASE_GUIDE.md` - Step-by-step guide for GitHub releases
- `example.sh` - Usage examples script
- `.gitignore` - Git ignore rules
- `dist/` - Output directory for built binaries (generated by GoReleaser)
- `downloads/` - Output directory where downloaded songs are stored

## Core Functionality

### 1. Web Scraping Process
The scraper uses HTML parsing to extract from SongSara pages:
- Album/playlist folder names with fallback selectors
- Proper HTTP headers to prevent getting blocked by website
- Individual song titles with multiple extraction methods
- Direct download URLs for each song with compression handling

### 2. Download Management
- Creates organized folder structure for each album/playlist
- Handles duplicate downloads (skips existing files with configurable option)
- Normalizes filenames to be filesystem-compatible
- Downloads songs with proper file extensions (MP3, M4A, WAV, FLAC)
- Concurrent downloads with configurable limits (default: 10)
- Progress tracking with visual progress bars
- Resume support for interrupted downloads

### 3. CLI Features
- Multiple URL support for batch downloads
- Configurable concurrency limits
- Custom output directories
- Verbose logging options
- Dry-run mode for previewing downloads
- Skip existing files option
- Custom timeout settings
- Version information command
- Comprehensive help and examples

## Crawler Selectors Documentation

### Primary Selectors Used in the Scraper

#### 1. Album/Playlist Title Selector
```css
.AL-Si
```
- **Purpose**: Extracts the album or playlist name from the page
- **CSS Selector**: `.AL-Si`
- **Target Element**: HTML element with class `AL-Si` containing the title text
- **Fallback Selectors**: h1, meta[property='og:title'], title, .title, .album-title, .playlist-title
- **Usage**: Used to create folder names for organizing downloaded songs

#### 2. Track List Container Selector
```css
#aramplayer .audioplayer-audios li
```
- **Purpose**: Finds all individual track elements in the audio player
- **CSS Selector**: `#aramplayer .audioplayer-audios li`
- **Target Elements**: List items (`<li>`) within the audio player container
- **Fallback Selectors**: li[data-title], .track, .song, li, .playlist-item, [data-src], [src*='.mp3']
- **Structure**: 
  - `#aramplayer` - Main audio player container
  - `.audioplayer-audios` - Audio tracks container
  - `li` - Individual track list items

#### 3. Song Title Extraction
```html
data-title
```
- **Purpose**: Extracts the song title from each track element
- **Attribute**: `data-title`
- **Target**: HTML attribute on track row elements containing the song name
- **Fallback Methods**: Text content, title attribute, alt attribute
- **Usage**: Used as filename for downloaded songs

#### 4. Download URL Selector
```css
div.audioplayer-source
```
- **Purpose**: Extracts the direct download URL for each song
- **CSS Selector**: `div.audioplayer-source`
- **Attribute**: `data-src`
- **Target Element**: `<div>` with class `audioplayer-source` containing the download URL
- **Fallback Selectors**: [data-src], [src], audio source, a[href*='.mp3'], a[href*='.m4a']
- **Usage**: Direct link to the audio file for downloading

### Selector Hierarchy

```
SongSara Page Structure:
├── .AL-Si (Album/Playlist Title)
└── #aramplayer (Audio Player Container)
    └── .audioplayer-audios (Tracks Container)
        └── li (Individual Track Elements)
            ├── data-title (Song Name)
            └── div.audioplayer-source
                └── data-src (Download URL)
```

## Build and Release System

### GoReleaser Configuration
- **Multi-platform builds**: macOS (Intel/ARM), Linux (x86_64/ARM64), Windows (x86_64)
- **Automatic versioning**: Semantic versioning with git tags
- **Release automation**: GitHub Actions workflow for automatic releases
- **Binary optimization**: Stripped binaries with version information
- **Archive creation**: Tar.gz for Unix, ZIP for Windows

### GitHub Integration
- **Automatic releases**: Triggered by git tags (v*)
- **Release notes**: Auto-generated from git commits
- **Download links**: Automatic generation for all platforms
- **Workflow**: `.github/workflows/release.yml` handles the entire process

### Build Commands
```bash
# Local development
make build          # Build single binary
make snapshot       # Build all platforms (local)
make release        # Build and release (requires tag)

# GoReleaser directly
goreleaser build --snapshot --clean
goreleaser release --clean
```

## Key Implementation Details

### File Processing Flow
1. **Input**: URLs from command line arguments
2. **Scraping**: Extract song data using multiple selector strategies
3. **Validation**: Verify album title and song URLs
4. **Download**: Process songs concurrently with progress tracking
5. **Organization**: Save to organized folders with proper filenames
6. **Summary**: Report success/failure statistics

### Filename Normalization
The project includes filename sanitization to handle special characters:
- **Regex Pattern**: `[/*?:"<>|]`
- **Purpose**: Removes filesystem-incompatible characters
- **Implementation**: Remove any characters that are invalid for file system names
- **Additional**: Trim whitespace, replace multiple spaces with single space

### HTTP Client Configuration
- **Timeout**: Configurable (default: 30 seconds)
- **Headers**: Browser-like headers to avoid anti-bot protection
- **Compression**: Proper handling of gzipped responses
- **User-Agent**: Realistic browser user agent string

### Concurrency Control
- **Semaphore-based**: Limits concurrent downloads to prevent overwhelming servers
- **Configurable**: Default 10, user-configurable via CLI flag
- **Error handling**: Graceful handling of failed downloads
- **Progress tracking**: Real-time progress bars for download status

## CLI Commands and Flags

### Main Command
```bash
songsara-dl [URL1] [URL2] [URL3]... [flags]
```

### Available Flags
- `-c, --concurrency int`: Maximum concurrent downloads (default: 10)
- `-o, --output string`: Output directory (default: "downloads")
- `-v, --verbose`: Enable verbose output
- `-n, --dry-run`: Preview downloads without downloading
- `-s, --skip-existing`: Skip existing files (default: true)
- `-t, --timeout int`: HTTP timeout in seconds (default: 30)

### Subcommands
- `version`: Print version information
- `help`: Show help information

## Error Handling and Resilience

### Network Errors
- **Timeout handling**: Configurable timeouts with retry logic
- **HTTP errors**: Proper status code checking and reporting
- **Connection issues**: Graceful degradation and error reporting

### Content Errors
- **Missing selectors**: Fallback selector strategies
- **Empty content**: Validation and error reporting
- **Invalid URLs**: URL validation and error handling

### File System Errors
- **Permission issues**: Proper error messages and suggestions
- **Disk space**: Check available space before downloading
- **Path issues**: Handle special characters and path validation

## Supported Platforms

### Build Targets
- **macOS**: Intel (x86_64) and Apple Silicon (ARM64)
- **Linux**: x86_64 and ARM64 architectures
- **Windows**: x86_64 architecture

### File Formats
- **MP3**: Primary format with automatic detection
- **M4A**: Supported with proper extension detection
- **WAV**: Supported with proper extension detection
- **FLAC**: Supported with proper extension detection

## Development Guidelines

### Code Structure
- **Modular design**: Separate concerns between CLI, downloader, and scraping
- **Error handling**: Comprehensive error handling with user-friendly messages
- **Configuration**: Environment-based configuration with sensible defaults
- **Testing**: Unit tests for core functionality (to be implemented)

### Performance Considerations
- **Concurrent downloads**: Efficient use of system resources
- **Memory management**: Proper cleanup of HTTP connections
- **Progress tracking**: Non-blocking progress updates
- **File I/O**: Efficient file operations with proper error handling

### Security Considerations
- **Input validation**: Validate all user inputs and URLs
- **File system safety**: Sanitize filenames and paths
- **Network security**: Use HTTPS and validate certificates
- **Error information**: Avoid exposing sensitive information in error messages